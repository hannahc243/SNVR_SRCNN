import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import datasets,layers, models, optimizers, activations
import matplotlib.pyplot as plt
from sklearn.utils import shuffle
import numpy as np
import cv2

ds_train, ds_val = tf.load('div2k', split = ['train', 'validation'])

HR_dataset = []
LR_dataset = []
for image in ds_train:
  image['lr'] = image['lr'].numpy()
  image['hr'] = image['hr'].numpy()
  image['lr'] = cv2.resize(image['lr'], (160,160), cv2.INTER_CUBIC)
  image['hr'] = cv2.resize(image['hr'], (480,480), cv2.INTER_CUBIC)
  image['hr'] = cv2.cvtColor(image['hr'], cv2.COLOR_BGR2GRAY)
  image['lr'] = cv2.cvtColor(image['lr'], cv2.COLOR_BGR2GRAY)
  image['lr'] = image['lr']/256.
  image['hr'] = image['hr']/256.
  HR_dataset.append(image['hr'])
  LR_dataset.append(image['lr'])
  
HR_val_dataset = []
LR_val_dataset = []
for image in ds_val:
  image['lr'] = image['lr'].numpy()
  image['hr'] = image['hr'].numpy()
  image['lr'] = cv2.resize(image['lr'], (160,160), cv2.INTER_CUBIC)
  image['hr'] = cv2.resize(image['hr'], (480,480), cv2.INTER_CUBIC)
  image['hr'] = cv2.cvtColor(image['hr'], cv2.COLOR_BGR2GRAY)
  image['lr'] = cv2.cvtColor(image['lr'], cv2.COLOR_BGR2GRAY)
  image['lr'] = image['lr']/256.
  image['hr'] = image['hr']/256.
  HR_val_dataset.append(image['hr'])
  LR_val_dataset.append(image['lr'])

HR_dataset, LR_dataset = shuffle(HR_dataset, LR_dataset, random_state=3)
train_images = np.expand_dims(LR_dataset[:720],-1)
train_labels = np.expand_dims(HR_dataset[:720],-1)
val_images = np.expand_dims(LR_val_dataset[:],-1)
val_labels = np.expand_dims(HR_val_dataset[:],-1)
test_images = np.expand_dims(LR_dataset[720:],-1)
test_labels = np.expand_dims(HR_dataset[720:],-1)

model = models.Sequential()
model.add(layers.experimental.preprocessing.Resizing(480,480, interpolation='bicubic', input_shape=(160,160,1)))
model.add(layers.Conv2D(64,(9,9), padding = "same", activation='relu'))
model.add(layers.Conv2D(32, (3,3), padding = "same", activation='relu'))
model.add(layers.Conv2D(1,(5,5),padding = "same",  activation='linear'))
model.summary()
opt = optimizers.Adam(learning_rate=0.0001)
model.compile(optimizer=opt,
            loss='mse')

history = model.fit(train_images,train_labels, epochs=200, validation_data=(val_images, val_labels))

plt.title('Learning Rate = 0.0001')
plt.plot(history.history['loss'], label='loss')
plt.plot(history.history['val_loss'], label = 'val_loss')
plt.legend()
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.show()

model.evaluate(x=test_images,y = test_labels)
